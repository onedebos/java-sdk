/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

public class ActivateAWorkflowRequestBody {

    /**
     * The Id of the user you want to lookup. Returned from the Create User endpoint. Note: you can also use the Embedded user's `username` in this field.
     */
    @JsonProperty("userId")
    private String userId;

    /**
     * The name of the workflow to activate.  If you pass this parameter, then `workflowId` is not required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workflowName")
    private Optional<? extends String> workflowName;

    /**
     * The Id of the workflow to activate. If you pass this parameter, then `workflowName` is not required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workflowId")
    private Optional<? extends String> workflowId;

    @JsonCreator
    public ActivateAWorkflowRequestBody(
            @JsonProperty("userId") String userId,
            @JsonProperty("workflowName") Optional<? extends String> workflowName,
            @JsonProperty("workflowId") Optional<? extends String> workflowId) {
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(workflowName, "workflowName");
        Utils.checkNotNull(workflowId, "workflowId");
        this.userId = userId;
        this.workflowName = workflowName;
        this.workflowId = workflowId;
    }
    
    public ActivateAWorkflowRequestBody(
            String userId) {
        this(userId, Optional.empty(), Optional.empty());
    }

    /**
     * The Id of the user you want to lookup. Returned from the Create User endpoint. Note: you can also use the Embedded user's `username` in this field.
     */
    @JsonIgnore
    public String userId() {
        return userId;
    }

    /**
     * The name of the workflow to activate.  If you pass this parameter, then `workflowId` is not required.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> workflowName() {
        return (Optional<String>) workflowName;
    }

    /**
     * The Id of the workflow to activate. If you pass this parameter, then `workflowName` is not required.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> workflowId() {
        return (Optional<String>) workflowId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The Id of the user you want to lookup. Returned from the Create User endpoint. Note: you can also use the Embedded user's `username` in this field.
     */
    public ActivateAWorkflowRequestBody withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    /**
     * The name of the workflow to activate.  If you pass this parameter, then `workflowId` is not required.
     */
    public ActivateAWorkflowRequestBody withWorkflowName(String workflowName) {
        Utils.checkNotNull(workflowName, "workflowName");
        this.workflowName = Optional.ofNullable(workflowName);
        return this;
    }

    /**
     * The name of the workflow to activate.  If you pass this parameter, then `workflowId` is not required.
     */
    public ActivateAWorkflowRequestBody withWorkflowName(Optional<? extends String> workflowName) {
        Utils.checkNotNull(workflowName, "workflowName");
        this.workflowName = workflowName;
        return this;
    }

    /**
     * The Id of the workflow to activate. If you pass this parameter, then `workflowName` is not required.
     */
    public ActivateAWorkflowRequestBody withWorkflowId(String workflowId) {
        Utils.checkNotNull(workflowId, "workflowId");
        this.workflowId = Optional.ofNullable(workflowId);
        return this;
    }

    /**
     * The Id of the workflow to activate. If you pass this parameter, then `workflowName` is not required.
     */
    public ActivateAWorkflowRequestBody withWorkflowId(Optional<? extends String> workflowId) {
        Utils.checkNotNull(workflowId, "workflowId");
        this.workflowId = workflowId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ActivateAWorkflowRequestBody other = (ActivateAWorkflowRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.userId, other.userId) &&
            java.util.Objects.deepEquals(this.workflowName, other.workflowName) &&
            java.util.Objects.deepEquals(this.workflowId, other.workflowId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            userId,
            workflowName,
            workflowId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ActivateAWorkflowRequestBody.class,
                "userId", userId,
                "workflowName", workflowName,
                "workflowId", workflowId);
    }
    
    public final static class Builder {
 
        private String userId;
 
        private Optional<? extends String> workflowName = Optional.empty();
 
        private Optional<? extends String> workflowId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The Id of the user you want to lookup. Returned from the Create User endpoint. Note: you can also use the Embedded user's `username` in this field.
         */
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        /**
         * The name of the workflow to activate.  If you pass this parameter, then `workflowId` is not required.
         */
        public Builder workflowName(String workflowName) {
            Utils.checkNotNull(workflowName, "workflowName");
            this.workflowName = Optional.ofNullable(workflowName);
            return this;
        }

        /**
         * The name of the workflow to activate.  If you pass this parameter, then `workflowId` is not required.
         */
        public Builder workflowName(Optional<? extends String> workflowName) {
            Utils.checkNotNull(workflowName, "workflowName");
            this.workflowName = workflowName;
            return this;
        }

        /**
         * The Id of the workflow to activate. If you pass this parameter, then `workflowName` is not required.
         */
        public Builder workflowId(String workflowId) {
            Utils.checkNotNull(workflowId, "workflowId");
            this.workflowId = Optional.ofNullable(workflowId);
            return this;
        }

        /**
         * The Id of the workflow to activate. If you pass this parameter, then `workflowName` is not required.
         */
        public Builder workflowId(Optional<? extends String> workflowId) {
            Utils.checkNotNull(workflowId, "workflowId");
            this.workflowId = workflowId;
            return this;
        }
        
        public ActivateAWorkflowRequestBody build() {
            return new ActivateAWorkflowRequestBody(
                userId,
                workflowName,
                workflowId);
        }
    }
}

