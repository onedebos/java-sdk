/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.Utils;

public class CompleteInstallationRequestBody {

    /**
     * ID you received when you started the installation.
     */
    @JsonProperty("installationId")
    private String installationId;

    /**
     * Values filled by user in your installation form
     */
    @JsonProperty("data")
    private java.util.List<Data> data;

    @JsonCreator
    public CompleteInstallationRequestBody(
            @JsonProperty("installationId") String installationId,
            @JsonProperty("data") java.util.List<Data> data) {
        Utils.checkNotNull(installationId, "installationId");
        Utils.checkNotNull(data, "data");
        this.installationId = installationId;
        this.data = data;
    }

    /**
     * ID you received when you started the installation.
     */
    @JsonIgnore
    public String installationId() {
        return installationId;
    }

    /**
     * Values filled by user in your installation form
     */
    @JsonIgnore
    public java.util.List<Data> data() {
        return data;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * ID you received when you started the installation.
     */
    public CompleteInstallationRequestBody withInstallationId(String installationId) {
        Utils.checkNotNull(installationId, "installationId");
        this.installationId = installationId;
        return this;
    }

    /**
     * Values filled by user in your installation form
     */
    public CompleteInstallationRequestBody withData(java.util.List<Data> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompleteInstallationRequestBody other = (CompleteInstallationRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.installationId, other.installationId) &&
            java.util.Objects.deepEquals(this.data, other.data);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            installationId,
            data);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompleteInstallationRequestBody.class,
                "installationId", installationId,
                "data", data);
    }
    
    public final static class Builder {
 
        private String installationId;
 
        private java.util.List<Data> data;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID you received when you started the installation.
         */
        public Builder installationId(String installationId) {
            Utils.checkNotNull(installationId, "installationId");
            this.installationId = installationId;
            return this;
        }

        /**
         * Values filled by user in your installation form
         */
        public Builder data(java.util.List<Data> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }
        
        public CompleteInstallationRequestBody build() {
            return new CompleteInstallationRequestBody(
                installationId,
                data);
        }
    }
}

