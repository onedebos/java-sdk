/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

public class StartInstallationData {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workflowId")
    private Optional<? extends String> workflowId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("app")
    private Optional<? extends String> app;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blockId")
    private Optional<? extends String> blockId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    private Optional<? extends java.util.List<StartInstallationFields>> fields;

    @JsonCreator
    public StartInstallationData(
            @JsonProperty("workflowId") Optional<? extends String> workflowId,
            @JsonProperty("app") Optional<? extends String> app,
            @JsonProperty("blockId") Optional<? extends String> blockId,
            @JsonProperty("fields") Optional<? extends java.util.List<StartInstallationFields>> fields) {
        Utils.checkNotNull(workflowId, "workflowId");
        Utils.checkNotNull(app, "app");
        Utils.checkNotNull(blockId, "blockId");
        Utils.checkNotNull(fields, "fields");
        this.workflowId = workflowId;
        this.app = app;
        this.blockId = blockId;
        this.fields = fields;
    }
    
    public StartInstallationData() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> workflowId() {
        return (Optional<String>) workflowId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> app() {
        return (Optional<String>) app;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> blockId() {
        return (Optional<String>) blockId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<StartInstallationFields>> fields() {
        return (Optional<java.util.List<StartInstallationFields>>) fields;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public StartInstallationData withWorkflowId(String workflowId) {
        Utils.checkNotNull(workflowId, "workflowId");
        this.workflowId = Optional.ofNullable(workflowId);
        return this;
    }

    public StartInstallationData withWorkflowId(Optional<? extends String> workflowId) {
        Utils.checkNotNull(workflowId, "workflowId");
        this.workflowId = workflowId;
        return this;
    }

    public StartInstallationData withApp(String app) {
        Utils.checkNotNull(app, "app");
        this.app = Optional.ofNullable(app);
        return this;
    }

    public StartInstallationData withApp(Optional<? extends String> app) {
        Utils.checkNotNull(app, "app");
        this.app = app;
        return this;
    }

    public StartInstallationData withBlockId(String blockId) {
        Utils.checkNotNull(blockId, "blockId");
        this.blockId = Optional.ofNullable(blockId);
        return this;
    }

    public StartInstallationData withBlockId(Optional<? extends String> blockId) {
        Utils.checkNotNull(blockId, "blockId");
        this.blockId = blockId;
        return this;
    }

    public StartInstallationData withFields(java.util.List<StartInstallationFields> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = Optional.ofNullable(fields);
        return this;
    }

    public StartInstallationData withFields(Optional<? extends java.util.List<StartInstallationFields>> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StartInstallationData other = (StartInstallationData) o;
        return 
            java.util.Objects.deepEquals(this.workflowId, other.workflowId) &&
            java.util.Objects.deepEquals(this.app, other.app) &&
            java.util.Objects.deepEquals(this.blockId, other.blockId) &&
            java.util.Objects.deepEquals(this.fields, other.fields);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            workflowId,
            app,
            blockId,
            fields);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StartInstallationData.class,
                "workflowId", workflowId,
                "app", app,
                "blockId", blockId,
                "fields", fields);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> workflowId = Optional.empty();
 
        private Optional<? extends String> app = Optional.empty();
 
        private Optional<? extends String> blockId = Optional.empty();
 
        private Optional<? extends java.util.List<StartInstallationFields>> fields = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder workflowId(String workflowId) {
            Utils.checkNotNull(workflowId, "workflowId");
            this.workflowId = Optional.ofNullable(workflowId);
            return this;
        }

        public Builder workflowId(Optional<? extends String> workflowId) {
            Utils.checkNotNull(workflowId, "workflowId");
            this.workflowId = workflowId;
            return this;
        }

        public Builder app(String app) {
            Utils.checkNotNull(app, "app");
            this.app = Optional.ofNullable(app);
            return this;
        }

        public Builder app(Optional<? extends String> app) {
            Utils.checkNotNull(app, "app");
            this.app = app;
            return this;
        }

        public Builder blockId(String blockId) {
            Utils.checkNotNull(blockId, "blockId");
            this.blockId = Optional.ofNullable(blockId);
            return this;
        }

        public Builder blockId(Optional<? extends String> blockId) {
            Utils.checkNotNull(blockId, "blockId");
            this.blockId = blockId;
            return this;
        }

        public Builder fields(java.util.List<StartInstallationFields> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        public Builder fields(Optional<? extends java.util.List<StartInstallationFields>> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }
        
        public StartInstallationData build() {
            return new StartInstallationData(
                workflowId,
                app,
                blockId,
                fields);
        }
    }
}

