/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

public class Data {

    @JsonProperty("workflowId")
    private String workflowId;

    @JsonProperty("blockId")
    private String blockId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    private Optional<? extends java.util.List<Fields>> fields;

    @JsonCreator
    public Data(
            @JsonProperty("workflowId") String workflowId,
            @JsonProperty("blockId") String blockId,
            @JsonProperty("fields") Optional<? extends java.util.List<Fields>> fields) {
        Utils.checkNotNull(workflowId, "workflowId");
        Utils.checkNotNull(blockId, "blockId");
        Utils.checkNotNull(fields, "fields");
        this.workflowId = workflowId;
        this.blockId = blockId;
        this.fields = fields;
    }
    
    public Data(
            String workflowId,
            String blockId) {
        this(workflowId, blockId, Optional.empty());
    }

    @JsonIgnore
    public String workflowId() {
        return workflowId;
    }

    @JsonIgnore
    public String blockId() {
        return blockId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<Fields>> fields() {
        return (Optional<java.util.List<Fields>>) fields;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Data withWorkflowId(String workflowId) {
        Utils.checkNotNull(workflowId, "workflowId");
        this.workflowId = workflowId;
        return this;
    }

    public Data withBlockId(String blockId) {
        Utils.checkNotNull(blockId, "blockId");
        this.blockId = blockId;
        return this;
    }

    public Data withFields(java.util.List<Fields> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = Optional.ofNullable(fields);
        return this;
    }

    public Data withFields(Optional<? extends java.util.List<Fields>> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Data other = (Data) o;
        return 
            java.util.Objects.deepEquals(this.workflowId, other.workflowId) &&
            java.util.Objects.deepEquals(this.blockId, other.blockId) &&
            java.util.Objects.deepEquals(this.fields, other.fields);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            workflowId,
            blockId,
            fields);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Data.class,
                "workflowId", workflowId,
                "blockId", blockId,
                "fields", fields);
    }
    
    public final static class Builder {
 
        private String workflowId;
 
        private String blockId;
 
        private Optional<? extends java.util.List<Fields>> fields = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder workflowId(String workflowId) {
            Utils.checkNotNull(workflowId, "workflowId");
            this.workflowId = workflowId;
            return this;
        }

        public Builder blockId(String blockId) {
            Utils.checkNotNull(blockId, "blockId");
            this.blockId = blockId;
            return this;
        }

        public Builder fields(java.util.List<Fields> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        public Builder fields(Optional<? extends java.util.List<Fields>> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }
        
        public Data build() {
            return new Data(
                workflowId,
                blockId,
                fields);
        }
    }
}

