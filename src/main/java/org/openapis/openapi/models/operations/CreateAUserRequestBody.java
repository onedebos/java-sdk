/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

public class CreateAUserRequestBody {

    /**
     * The name of the user you want to create. Typically a full name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fullName")
    private Optional<? extends String> fullName;

    /**
     * The username to be associated with the user.  To easily identify a customer, we recommend using a friendly username such as an email for example. The username must be unique (this acts as an identifier to reference and lookup a given merchant on your platform).
     */
    @JsonProperty("username")
    private String username;

    @JsonCreator
    public CreateAUserRequestBody(
            @JsonProperty("fullName") Optional<? extends String> fullName,
            @JsonProperty("username") String username) {
        Utils.checkNotNull(fullName, "fullName");
        Utils.checkNotNull(username, "username");
        this.fullName = fullName;
        this.username = username;
    }
    
    public CreateAUserRequestBody(
            String username) {
        this(Optional.empty(), username);
    }

    /**
     * The name of the user you want to create. Typically a full name.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> fullName() {
        return (Optional<String>) fullName;
    }

    /**
     * The username to be associated with the user.  To easily identify a customer, we recommend using a friendly username such as an email for example. The username must be unique (this acts as an identifier to reference and lookup a given merchant on your platform).
     */
    @JsonIgnore
    public String username() {
        return username;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the user you want to create. Typically a full name.
     */
    public CreateAUserRequestBody withFullName(String fullName) {
        Utils.checkNotNull(fullName, "fullName");
        this.fullName = Optional.ofNullable(fullName);
        return this;
    }

    /**
     * The name of the user you want to create. Typically a full name.
     */
    public CreateAUserRequestBody withFullName(Optional<? extends String> fullName) {
        Utils.checkNotNull(fullName, "fullName");
        this.fullName = fullName;
        return this;
    }

    /**
     * The username to be associated with the user.  To easily identify a customer, we recommend using a friendly username such as an email for example. The username must be unique (this acts as an identifier to reference and lookup a given merchant on your platform).
     */
    public CreateAUserRequestBody withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateAUserRequestBody other = (CreateAUserRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.fullName, other.fullName) &&
            java.util.Objects.deepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            fullName,
            username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateAUserRequestBody.class,
                "fullName", fullName,
                "username", username);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> fullName = Optional.empty();
 
        private String username;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the user you want to create. Typically a full name.
         */
        public Builder fullName(String fullName) {
            Utils.checkNotNull(fullName, "fullName");
            this.fullName = Optional.ofNullable(fullName);
            return this;
        }

        /**
         * The name of the user you want to create. Typically a full name.
         */
        public Builder fullName(Optional<? extends String> fullName) {
            Utils.checkNotNull(fullName, "fullName");
            this.fullName = fullName;
            return this;
        }

        /**
         * The username to be associated with the user.  To easily identify a customer, we recommend using a friendly username such as an email for example. The username must be unique (this acts as an identifier to reference and lookup a given merchant on your platform).
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }
        
        public CreateAUserRequestBody build() {
            return new CreateAUserRequestBody(
                fullName,
                username);
        }
    }
}

