/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.Utils;
/**
 * UpgradeWorkflowResponseBody - 200
 */

public class UpgradeWorkflowResponseBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upgraded")
    private Optional<? extends Boolean> upgraded;

    @JsonCreator
    public UpgradeWorkflowResponseBody(
            @JsonProperty("upgraded") Optional<? extends Boolean> upgraded) {
        Utils.checkNotNull(upgraded, "upgraded");
        this.upgraded = upgraded;
    }
    
    public UpgradeWorkflowResponseBody() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> upgraded() {
        return (Optional<Boolean>) upgraded;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpgradeWorkflowResponseBody withUpgraded(boolean upgraded) {
        Utils.checkNotNull(upgraded, "upgraded");
        this.upgraded = Optional.ofNullable(upgraded);
        return this;
    }

    public UpgradeWorkflowResponseBody withUpgraded(Optional<? extends Boolean> upgraded) {
        Utils.checkNotNull(upgraded, "upgraded");
        this.upgraded = upgraded;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpgradeWorkflowResponseBody other = (UpgradeWorkflowResponseBody) o;
        return 
            java.util.Objects.deepEquals(this.upgraded, other.upgraded);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            upgraded);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpgradeWorkflowResponseBody.class,
                "upgraded", upgraded);
    }
    
    public final static class Builder {
 
        private Optional<? extends Boolean> upgraded;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder upgraded(boolean upgraded) {
            Utils.checkNotNull(upgraded, "upgraded");
            this.upgraded = Optional.ofNullable(upgraded);
            return this;
        }

        public Builder upgraded(Optional<? extends Boolean> upgraded) {
            Utils.checkNotNull(upgraded, "upgraded");
            this.upgraded = upgraded;
            return this;
        }
        
        public UpgradeWorkflowResponseBody build() {
            if (upgraded == null) {
                upgraded = _SINGLETON_VALUE_Upgraded.value();
            }
            return new UpgradeWorkflowResponseBody(
                upgraded);
        }

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_Upgraded =
                new LazySingletonValue<>(
                        "upgraded",
                        "true",
                        new TypeReference<Optional<? extends Boolean>>() {});
    }
}

