/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;
/**
 * GenerateOauthLinkResponseBody - 200
 */

public class GenerateOauthLinkResponseBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauthUrl")
    private Optional<? extends String> oauthUrl;

    @JsonCreator
    public GenerateOauthLinkResponseBody(
            @JsonProperty("oauthUrl") Optional<? extends String> oauthUrl) {
        Utils.checkNotNull(oauthUrl, "oauthUrl");
        this.oauthUrl = oauthUrl;
    }
    
    public GenerateOauthLinkResponseBody() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> oauthUrl() {
        return (Optional<String>) oauthUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GenerateOauthLinkResponseBody withOauthUrl(String oauthUrl) {
        Utils.checkNotNull(oauthUrl, "oauthUrl");
        this.oauthUrl = Optional.ofNullable(oauthUrl);
        return this;
    }

    public GenerateOauthLinkResponseBody withOauthUrl(Optional<? extends String> oauthUrl) {
        Utils.checkNotNull(oauthUrl, "oauthUrl");
        this.oauthUrl = oauthUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GenerateOauthLinkResponseBody other = (GenerateOauthLinkResponseBody) o;
        return 
            java.util.Objects.deepEquals(this.oauthUrl, other.oauthUrl);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            oauthUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GenerateOauthLinkResponseBody.class,
                "oauthUrl", oauthUrl);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> oauthUrl = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder oauthUrl(String oauthUrl) {
            Utils.checkNotNull(oauthUrl, "oauthUrl");
            this.oauthUrl = Optional.ofNullable(oauthUrl);
            return this;
        }

        public Builder oauthUrl(Optional<? extends String> oauthUrl) {
            Utils.checkNotNull(oauthUrl, "oauthUrl");
            this.oauthUrl = oauthUrl;
            return this;
        }
        
        public GenerateOauthLinkResponseBody build() {
            return new GenerateOauthLinkResponseBody(
                oauthUrl);
        }
    }
}

