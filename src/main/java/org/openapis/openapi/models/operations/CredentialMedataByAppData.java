/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.Utils;

public class CredentialMedataByAppData {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon")
    private Optional<? extends String> icon;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isOauth")
    private Optional<? extends Boolean> isOauth;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    private Optional<? extends java.util.List<CredentialMedataByAppProperties>> properties;

    @JsonCreator
    public CredentialMedataByAppData(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("icon") Optional<? extends String> icon,
            @JsonProperty("isOauth") Optional<? extends Boolean> isOauth,
            @JsonProperty("properties") Optional<? extends java.util.List<CredentialMedataByAppProperties>> properties) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(icon, "icon");
        Utils.checkNotNull(isOauth, "isOauth");
        Utils.checkNotNull(properties, "properties");
        this.name = name;
        this.icon = icon;
        this.isOauth = isOauth;
        this.properties = properties;
    }
    
    public CredentialMedataByAppData() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> name() {
        return (Optional<String>) name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> icon() {
        return (Optional<String>) icon;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> isOauth() {
        return (Optional<Boolean>) isOauth;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<CredentialMedataByAppProperties>> properties() {
        return (Optional<java.util.List<CredentialMedataByAppProperties>>) properties;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CredentialMedataByAppData withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public CredentialMedataByAppData withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public CredentialMedataByAppData withIcon(String icon) {
        Utils.checkNotNull(icon, "icon");
        this.icon = Optional.ofNullable(icon);
        return this;
    }

    public CredentialMedataByAppData withIcon(Optional<? extends String> icon) {
        Utils.checkNotNull(icon, "icon");
        this.icon = icon;
        return this;
    }

    public CredentialMedataByAppData withIsOauth(boolean isOauth) {
        Utils.checkNotNull(isOauth, "isOauth");
        this.isOauth = Optional.ofNullable(isOauth);
        return this;
    }

    public CredentialMedataByAppData withIsOauth(Optional<? extends Boolean> isOauth) {
        Utils.checkNotNull(isOauth, "isOauth");
        this.isOauth = isOauth;
        return this;
    }

    public CredentialMedataByAppData withProperties(java.util.List<CredentialMedataByAppProperties> properties) {
        Utils.checkNotNull(properties, "properties");
        this.properties = Optional.ofNullable(properties);
        return this;
    }

    public CredentialMedataByAppData withProperties(Optional<? extends java.util.List<CredentialMedataByAppProperties>> properties) {
        Utils.checkNotNull(properties, "properties");
        this.properties = properties;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CredentialMedataByAppData other = (CredentialMedataByAppData) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.icon, other.icon) &&
            java.util.Objects.deepEquals(this.isOauth, other.isOauth) &&
            java.util.Objects.deepEquals(this.properties, other.properties);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            icon,
            isOauth,
            properties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CredentialMedataByAppData.class,
                "name", name,
                "icon", icon,
                "isOauth", isOauth,
                "properties", properties);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends String> icon = Optional.empty();
 
        private Optional<? extends Boolean> isOauth;
 
        private Optional<? extends java.util.List<CredentialMedataByAppProperties>> properties = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder icon(String icon) {
            Utils.checkNotNull(icon, "icon");
            this.icon = Optional.ofNullable(icon);
            return this;
        }

        public Builder icon(Optional<? extends String> icon) {
            Utils.checkNotNull(icon, "icon");
            this.icon = icon;
            return this;
        }

        public Builder isOauth(boolean isOauth) {
            Utils.checkNotNull(isOauth, "isOauth");
            this.isOauth = Optional.ofNullable(isOauth);
            return this;
        }

        public Builder isOauth(Optional<? extends Boolean> isOauth) {
            Utils.checkNotNull(isOauth, "isOauth");
            this.isOauth = isOauth;
            return this;
        }

        public Builder properties(java.util.List<CredentialMedataByAppProperties> properties) {
            Utils.checkNotNull(properties, "properties");
            this.properties = Optional.ofNullable(properties);
            return this;
        }

        public Builder properties(Optional<? extends java.util.List<CredentialMedataByAppProperties>> properties) {
            Utils.checkNotNull(properties, "properties");
            this.properties = properties;
            return this;
        }
        
        public CredentialMedataByAppData build() {
            if (isOauth == null) {
                isOauth = _SINGLETON_VALUE_IsOauth.value();
            }
            return new CredentialMedataByAppData(
                name,
                icon,
                isOauth,
                properties);
        }

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_IsOauth =
                new LazySingletonValue<>(
                        "isOauth",
                        "true",
                        new TypeReference<Optional<? extends Boolean>>() {});
    }
}

