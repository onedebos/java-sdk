/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

public class ListAllUsersData {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userId")
    private Optional<? extends String> userId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private Optional<? extends String> username;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fullName")
    private Optional<? extends String> fullName;

    @JsonCreator
    public ListAllUsersData(
            @JsonProperty("userId") Optional<? extends String> userId,
            @JsonProperty("username") Optional<? extends String> username,
            @JsonProperty("fullName") Optional<? extends String> fullName) {
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(fullName, "fullName");
        this.userId = userId;
        this.username = username;
        this.fullName = fullName;
    }
    
    public ListAllUsersData() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> userId() {
        return (Optional<String>) userId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> username() {
        return (Optional<String>) username;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> fullName() {
        return (Optional<String>) fullName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ListAllUsersData withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }

    public ListAllUsersData withUserId(Optional<? extends String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    public ListAllUsersData withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = Optional.ofNullable(username);
        return this;
    }

    public ListAllUsersData withUsername(Optional<? extends String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    public ListAllUsersData withFullName(String fullName) {
        Utils.checkNotNull(fullName, "fullName");
        this.fullName = Optional.ofNullable(fullName);
        return this;
    }

    public ListAllUsersData withFullName(Optional<? extends String> fullName) {
        Utils.checkNotNull(fullName, "fullName");
        this.fullName = fullName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAllUsersData other = (ListAllUsersData) o;
        return 
            java.util.Objects.deepEquals(this.userId, other.userId) &&
            java.util.Objects.deepEquals(this.username, other.username) &&
            java.util.Objects.deepEquals(this.fullName, other.fullName);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            userId,
            username,
            fullName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAllUsersData.class,
                "userId", userId,
                "username", username,
                "fullName", fullName);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> userId = Optional.empty();
 
        private Optional<? extends String> username = Optional.empty();
 
        private Optional<? extends String> fullName = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        public Builder userId(Optional<? extends String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = Optional.ofNullable(username);
            return this;
        }

        public Builder username(Optional<? extends String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        public Builder fullName(String fullName) {
            Utils.checkNotNull(fullName, "fullName");
            this.fullName = Optional.ofNullable(fullName);
            return this;
        }

        public Builder fullName(Optional<? extends String> fullName) {
            Utils.checkNotNull(fullName, "fullName");
            this.fullName = fullName;
            return this;
        }
        
        public ListAllUsersData build() {
            return new ListAllUsersData(
                userId,
                username,
                fullName);
        }
    }
}

