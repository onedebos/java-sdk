/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

public class ListAllUsersRequest {

    /**
     * You can pass a parentWorkflowId if you wish to list users for a specific workflow.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parentWorkflowId")
    private Optional<? extends String> parentWorkflowId;

    @JsonCreator
    public ListAllUsersRequest(
            Optional<? extends String> parentWorkflowId) {
        Utils.checkNotNull(parentWorkflowId, "parentWorkflowId");
        this.parentWorkflowId = parentWorkflowId;
    }
    
    public ListAllUsersRequest() {
        this(Optional.empty());
    }

    /**
     * You can pass a parentWorkflowId if you wish to list users for a specific workflow.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> parentWorkflowId() {
        return (Optional<String>) parentWorkflowId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * You can pass a parentWorkflowId if you wish to list users for a specific workflow.
     */
    public ListAllUsersRequest withParentWorkflowId(String parentWorkflowId) {
        Utils.checkNotNull(parentWorkflowId, "parentWorkflowId");
        this.parentWorkflowId = Optional.ofNullable(parentWorkflowId);
        return this;
    }

    /**
     * You can pass a parentWorkflowId if you wish to list users for a specific workflow.
     */
    public ListAllUsersRequest withParentWorkflowId(Optional<? extends String> parentWorkflowId) {
        Utils.checkNotNull(parentWorkflowId, "parentWorkflowId");
        this.parentWorkflowId = parentWorkflowId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAllUsersRequest other = (ListAllUsersRequest) o;
        return 
            java.util.Objects.deepEquals(this.parentWorkflowId, other.parentWorkflowId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            parentWorkflowId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAllUsersRequest.class,
                "parentWorkflowId", parentWorkflowId);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> parentWorkflowId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * You can pass a parentWorkflowId if you wish to list users for a specific workflow.
         */
        public Builder parentWorkflowId(String parentWorkflowId) {
            Utils.checkNotNull(parentWorkflowId, "parentWorkflowId");
            this.parentWorkflowId = Optional.ofNullable(parentWorkflowId);
            return this;
        }

        /**
         * You can pass a parentWorkflowId if you wish to list users for a specific workflow.
         */
        public Builder parentWorkflowId(Optional<? extends String> parentWorkflowId) {
            Utils.checkNotNull(parentWorkflowId, "parentWorkflowId");
            this.parentWorkflowId = parentWorkflowId;
            return this;
        }
        
        public ListAllUsersRequest build() {
            return new ListAllUsersRequest(
                parentWorkflowId);
        }
    }
}

