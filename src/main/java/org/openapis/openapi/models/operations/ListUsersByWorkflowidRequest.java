/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

public class ListUsersByWorkflowidRequest {

    /**
     * The Id of the parent workflow you would like to list users for.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=workflowId")
    private String workflowId;

    /**
     * The Id of the user you would like to query.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=userId")
    private Optional<? extends String> userId;

    @JsonCreator
    public ListUsersByWorkflowidRequest(
            String workflowId,
            Optional<? extends String> userId) {
        Utils.checkNotNull(workflowId, "workflowId");
        Utils.checkNotNull(userId, "userId");
        this.workflowId = workflowId;
        this.userId = userId;
    }
    
    public ListUsersByWorkflowidRequest(
            String workflowId) {
        this(workflowId, Optional.empty());
    }

    /**
     * The Id of the parent workflow you would like to list users for.
     */
    @JsonIgnore
    public String workflowId() {
        return workflowId;
    }

    /**
     * The Id of the user you would like to query.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> userId() {
        return (Optional<String>) userId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The Id of the parent workflow you would like to list users for.
     */
    public ListUsersByWorkflowidRequest withWorkflowId(String workflowId) {
        Utils.checkNotNull(workflowId, "workflowId");
        this.workflowId = workflowId;
        return this;
    }

    /**
     * The Id of the user you would like to query.
     */
    public ListUsersByWorkflowidRequest withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }

    /**
     * The Id of the user you would like to query.
     */
    public ListUsersByWorkflowidRequest withUserId(Optional<? extends String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListUsersByWorkflowidRequest other = (ListUsersByWorkflowidRequest) o;
        return 
            java.util.Objects.deepEquals(this.workflowId, other.workflowId) &&
            java.util.Objects.deepEquals(this.userId, other.userId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            workflowId,
            userId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListUsersByWorkflowidRequest.class,
                "workflowId", workflowId,
                "userId", userId);
    }
    
    public final static class Builder {
 
        private String workflowId;
 
        private Optional<? extends String> userId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The Id of the parent workflow you would like to list users for.
         */
        public Builder workflowId(String workflowId) {
            Utils.checkNotNull(workflowId, "workflowId");
            this.workflowId = workflowId;
            return this;
        }

        /**
         * The Id of the user you would like to query.
         */
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        /**
         * The Id of the user you would like to query.
         */
        public Builder userId(Optional<? extends String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }
        
        public ListUsersByWorkflowidRequest build() {
            return new ListUsersByWorkflowidRequest(
                workflowId,
                userId);
        }
    }
}

