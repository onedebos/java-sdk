/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.Utils;
/**
 * GetWorkflowAnalyticsResponseBody - 200
 */

public class GetWorkflowAnalyticsResponseBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAppActions")
    private Optional<? extends Long> totalAppActions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalWorkflowRuns")
    private Optional<? extends Long> totalWorkflowRuns;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalErrors")
    private Optional<? extends Long> totalErrors;

    @JsonCreator
    public GetWorkflowAnalyticsResponseBody(
            @JsonProperty("totalAppActions") Optional<? extends Long> totalAppActions,
            @JsonProperty("totalWorkflowRuns") Optional<? extends Long> totalWorkflowRuns,
            @JsonProperty("totalErrors") Optional<? extends Long> totalErrors) {
        Utils.checkNotNull(totalAppActions, "totalAppActions");
        Utils.checkNotNull(totalWorkflowRuns, "totalWorkflowRuns");
        Utils.checkNotNull(totalErrors, "totalErrors");
        this.totalAppActions = totalAppActions;
        this.totalWorkflowRuns = totalWorkflowRuns;
        this.totalErrors = totalErrors;
    }
    
    public GetWorkflowAnalyticsResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> totalAppActions() {
        return (Optional<Long>) totalAppActions;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> totalWorkflowRuns() {
        return (Optional<Long>) totalWorkflowRuns;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> totalErrors() {
        return (Optional<Long>) totalErrors;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetWorkflowAnalyticsResponseBody withTotalAppActions(long totalAppActions) {
        Utils.checkNotNull(totalAppActions, "totalAppActions");
        this.totalAppActions = Optional.ofNullable(totalAppActions);
        return this;
    }

    public GetWorkflowAnalyticsResponseBody withTotalAppActions(Optional<? extends Long> totalAppActions) {
        Utils.checkNotNull(totalAppActions, "totalAppActions");
        this.totalAppActions = totalAppActions;
        return this;
    }

    public GetWorkflowAnalyticsResponseBody withTotalWorkflowRuns(long totalWorkflowRuns) {
        Utils.checkNotNull(totalWorkflowRuns, "totalWorkflowRuns");
        this.totalWorkflowRuns = Optional.ofNullable(totalWorkflowRuns);
        return this;
    }

    public GetWorkflowAnalyticsResponseBody withTotalWorkflowRuns(Optional<? extends Long> totalWorkflowRuns) {
        Utils.checkNotNull(totalWorkflowRuns, "totalWorkflowRuns");
        this.totalWorkflowRuns = totalWorkflowRuns;
        return this;
    }

    public GetWorkflowAnalyticsResponseBody withTotalErrors(long totalErrors) {
        Utils.checkNotNull(totalErrors, "totalErrors");
        this.totalErrors = Optional.ofNullable(totalErrors);
        return this;
    }

    public GetWorkflowAnalyticsResponseBody withTotalErrors(Optional<? extends Long> totalErrors) {
        Utils.checkNotNull(totalErrors, "totalErrors");
        this.totalErrors = totalErrors;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetWorkflowAnalyticsResponseBody other = (GetWorkflowAnalyticsResponseBody) o;
        return 
            java.util.Objects.deepEquals(this.totalAppActions, other.totalAppActions) &&
            java.util.Objects.deepEquals(this.totalWorkflowRuns, other.totalWorkflowRuns) &&
            java.util.Objects.deepEquals(this.totalErrors, other.totalErrors);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            totalAppActions,
            totalWorkflowRuns,
            totalErrors);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetWorkflowAnalyticsResponseBody.class,
                "totalAppActions", totalAppActions,
                "totalWorkflowRuns", totalWorkflowRuns,
                "totalErrors", totalErrors);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> totalAppActions;
 
        private Optional<? extends Long> totalWorkflowRuns;
 
        private Optional<? extends Long> totalErrors;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder totalAppActions(long totalAppActions) {
            Utils.checkNotNull(totalAppActions, "totalAppActions");
            this.totalAppActions = Optional.ofNullable(totalAppActions);
            return this;
        }

        public Builder totalAppActions(Optional<? extends Long> totalAppActions) {
            Utils.checkNotNull(totalAppActions, "totalAppActions");
            this.totalAppActions = totalAppActions;
            return this;
        }

        public Builder totalWorkflowRuns(long totalWorkflowRuns) {
            Utils.checkNotNull(totalWorkflowRuns, "totalWorkflowRuns");
            this.totalWorkflowRuns = Optional.ofNullable(totalWorkflowRuns);
            return this;
        }

        public Builder totalWorkflowRuns(Optional<? extends Long> totalWorkflowRuns) {
            Utils.checkNotNull(totalWorkflowRuns, "totalWorkflowRuns");
            this.totalWorkflowRuns = totalWorkflowRuns;
            return this;
        }

        public Builder totalErrors(long totalErrors) {
            Utils.checkNotNull(totalErrors, "totalErrors");
            this.totalErrors = Optional.ofNullable(totalErrors);
            return this;
        }

        public Builder totalErrors(Optional<? extends Long> totalErrors) {
            Utils.checkNotNull(totalErrors, "totalErrors");
            this.totalErrors = totalErrors;
            return this;
        }
        
        public GetWorkflowAnalyticsResponseBody build() {
            if (totalAppActions == null) {
                totalAppActions = _SINGLETON_VALUE_TotalAppActions.value();
            }
            if (totalWorkflowRuns == null) {
                totalWorkflowRuns = _SINGLETON_VALUE_TotalWorkflowRuns.value();
            }
            if (totalErrors == null) {
                totalErrors = _SINGLETON_VALUE_TotalErrors.value();
            }
            return new GetWorkflowAnalyticsResponseBody(
                totalAppActions,
                totalWorkflowRuns,
                totalErrors);
        }

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_TotalAppActions =
                new LazySingletonValue<>(
                        "totalAppActions",
                        "0",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_TotalWorkflowRuns =
                new LazySingletonValue<>(
                        "totalWorkflowRuns",
                        "0",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_TotalErrors =
                new LazySingletonValue<>(
                        "totalErrors",
                        "0",
                        new TypeReference<Optional<? extends Long>>() {});
    }
}

