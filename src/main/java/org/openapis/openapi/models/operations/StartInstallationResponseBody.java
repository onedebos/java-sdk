/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;
/**
 * StartInstallationResponseBody - 200
 */

public class StartInstallationResponseBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    private Optional<? extends java.util.List<StartInstallationData>> data;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("installationId")
    private Optional<? extends String> installationId;

    @JsonCreator
    public StartInstallationResponseBody(
            @JsonProperty("data") Optional<? extends java.util.List<StartInstallationData>> data,
            @JsonProperty("installationId") Optional<? extends String> installationId) {
        Utils.checkNotNull(data, "data");
        Utils.checkNotNull(installationId, "installationId");
        this.data = data;
        this.installationId = installationId;
    }
    
    public StartInstallationResponseBody() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<StartInstallationData>> data() {
        return (Optional<java.util.List<StartInstallationData>>) data;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> installationId() {
        return (Optional<String>) installationId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public StartInstallationResponseBody withData(java.util.List<StartInstallationData> data) {
        Utils.checkNotNull(data, "data");
        this.data = Optional.ofNullable(data);
        return this;
    }

    public StartInstallationResponseBody withData(Optional<? extends java.util.List<StartInstallationData>> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    public StartInstallationResponseBody withInstallationId(String installationId) {
        Utils.checkNotNull(installationId, "installationId");
        this.installationId = Optional.ofNullable(installationId);
        return this;
    }

    public StartInstallationResponseBody withInstallationId(Optional<? extends String> installationId) {
        Utils.checkNotNull(installationId, "installationId");
        this.installationId = installationId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StartInstallationResponseBody other = (StartInstallationResponseBody) o;
        return 
            java.util.Objects.deepEquals(this.data, other.data) &&
            java.util.Objects.deepEquals(this.installationId, other.installationId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            data,
            installationId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StartInstallationResponseBody.class,
                "data", data,
                "installationId", installationId);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<StartInstallationData>> data = Optional.empty();
 
        private Optional<? extends String> installationId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder data(java.util.List<StartInstallationData> data) {
            Utils.checkNotNull(data, "data");
            this.data = Optional.ofNullable(data);
            return this;
        }

        public Builder data(Optional<? extends java.util.List<StartInstallationData>> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }

        public Builder installationId(String installationId) {
            Utils.checkNotNull(installationId, "installationId");
            this.installationId = Optional.ofNullable(installationId);
            return this;
        }

        public Builder installationId(Optional<? extends String> installationId) {
            Utils.checkNotNull(installationId, "installationId");
            this.installationId = installationId;
            return this;
        }
        
        public StartInstallationResponseBody build() {
            return new StartInstallationResponseBody(
                data,
                installationId);
        }
    }
}

