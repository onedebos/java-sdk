/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

public class ListUserCredentialsData {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentialId")
    private Optional<? extends String> credentialId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends String> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<? extends String> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    private Optional<? extends String> updatedAt;

    @JsonCreator
    public ListUserCredentialsData(
            @JsonProperty("credentialId") Optional<? extends String> credentialId,
            @JsonProperty("type") Optional<? extends String> type,
            @JsonProperty("createdAt") Optional<? extends String> createdAt,
            @JsonProperty("updatedAt") Optional<? extends String> updatedAt) {
        Utils.checkNotNull(credentialId, "credentialId");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.credentialId = credentialId;
        this.type = type;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public ListUserCredentialsData() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> credentialId() {
        return (Optional<String>) credentialId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> type() {
        return (Optional<String>) type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> createdAt() {
        return (Optional<String>) createdAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> updatedAt() {
        return (Optional<String>) updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ListUserCredentialsData withCredentialId(String credentialId) {
        Utils.checkNotNull(credentialId, "credentialId");
        this.credentialId = Optional.ofNullable(credentialId);
        return this;
    }

    public ListUserCredentialsData withCredentialId(Optional<? extends String> credentialId) {
        Utils.checkNotNull(credentialId, "credentialId");
        this.credentialId = credentialId;
        return this;
    }

    public ListUserCredentialsData withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public ListUserCredentialsData withType(Optional<? extends String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public ListUserCredentialsData withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public ListUserCredentialsData withCreatedAt(Optional<? extends String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public ListUserCredentialsData withUpdatedAt(String updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public ListUserCredentialsData withUpdatedAt(Optional<? extends String> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListUserCredentialsData other = (ListUserCredentialsData) o;
        return 
            java.util.Objects.deepEquals(this.credentialId, other.credentialId) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            credentialId,
            type,
            createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListUserCredentialsData.class,
                "credentialId", credentialId,
                "type", type,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> credentialId = Optional.empty();
 
        private Optional<? extends String> type = Optional.empty();
 
        private Optional<? extends String> createdAt = Optional.empty();
 
        private Optional<? extends String> updatedAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder credentialId(String credentialId) {
            Utils.checkNotNull(credentialId, "credentialId");
            this.credentialId = Optional.ofNullable(credentialId);
            return this;
        }

        public Builder credentialId(Optional<? extends String> credentialId) {
            Utils.checkNotNull(credentialId, "credentialId");
            this.credentialId = credentialId;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<? extends String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<? extends String> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public ListUserCredentialsData build() {
            return new ListUserCredentialsData(
                credentialId,
                type,
                createdAt,
                updatedAt);
        }
    }
}

