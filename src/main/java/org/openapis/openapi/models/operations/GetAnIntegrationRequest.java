/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

public class GetAnIntegrationRequest {

    /**
     * This API parameter allows you to filter results based on the integrationId or the integrationName (also referred to as 'app'). The integration name (app) is a custom name that you have set for your integration. When using the integration name (app), provide the name of the integration you want to filter for (e.g. 'shopify order sync' or 'magento product creation'). You can obtain the integration name (app) from the List Integrations endpoint under the 'app' parameter, or by checking your UI. Either integrationId or integrationName must be provided but it cannot be both.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=integrationId")
    private String integrationId;

    /**
     * The Id used to identify the user. Note: you can also use the Embedded user's `username` in this field.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=userId")
    private String userId;

    @JsonCreator
    public GetAnIntegrationRequest(
            String integrationId,
            String userId) {
        Utils.checkNotNull(integrationId, "integrationId");
        Utils.checkNotNull(userId, "userId");
        this.integrationId = integrationId;
        this.userId = userId;
    }

    /**
     * This API parameter allows you to filter results based on the integrationId or the integrationName (also referred to as 'app'). The integration name (app) is a custom name that you have set for your integration. When using the integration name (app), provide the name of the integration you want to filter for (e.g. 'shopify order sync' or 'magento product creation'). You can obtain the integration name (app) from the List Integrations endpoint under the 'app' parameter, or by checking your UI. Either integrationId or integrationName must be provided but it cannot be both.
     */
    @JsonIgnore
    public String integrationId() {
        return integrationId;
    }

    /**
     * The Id used to identify the user. Note: you can also use the Embedded user's `username` in this field.
     */
    @JsonIgnore
    public String userId() {
        return userId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * This API parameter allows you to filter results based on the integrationId or the integrationName (also referred to as 'app'). The integration name (app) is a custom name that you have set for your integration. When using the integration name (app), provide the name of the integration you want to filter for (e.g. 'shopify order sync' or 'magento product creation'). You can obtain the integration name (app) from the List Integrations endpoint under the 'app' parameter, or by checking your UI. Either integrationId or integrationName must be provided but it cannot be both.
     */
    public GetAnIntegrationRequest withIntegrationId(String integrationId) {
        Utils.checkNotNull(integrationId, "integrationId");
        this.integrationId = integrationId;
        return this;
    }

    /**
     * The Id used to identify the user. Note: you can also use the Embedded user's `username` in this field.
     */
    public GetAnIntegrationRequest withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetAnIntegrationRequest other = (GetAnIntegrationRequest) o;
        return 
            java.util.Objects.deepEquals(this.integrationId, other.integrationId) &&
            java.util.Objects.deepEquals(this.userId, other.userId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            integrationId,
            userId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetAnIntegrationRequest.class,
                "integrationId", integrationId,
                "userId", userId);
    }
    
    public final static class Builder {
 
        private String integrationId;
 
        private String userId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * This API parameter allows you to filter results based on the integrationId or the integrationName (also referred to as 'app'). The integration name (app) is a custom name that you have set for your integration. When using the integration name (app), provide the name of the integration you want to filter for (e.g. 'shopify order sync' or 'magento product creation'). You can obtain the integration name (app) from the List Integrations endpoint under the 'app' parameter, or by checking your UI. Either integrationId or integrationName must be provided but it cannot be both.
         */
        public Builder integrationId(String integrationId) {
            Utils.checkNotNull(integrationId, "integrationId");
            this.integrationId = integrationId;
            return this;
        }

        /**
         * The Id used to identify the user. Note: you can also use the Embedded user's `username` in this field.
         */
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }
        
        public GetAnIntegrationRequest build() {
            return new GetAnIntegrationRequest(
                integrationId,
                userId);
        }
    }
}

