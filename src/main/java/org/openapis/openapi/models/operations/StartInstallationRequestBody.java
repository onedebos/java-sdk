/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

public class StartInstallationRequestBody {

    /**
     * ID of the user that will install your integration
     */
    @JsonProperty("userId")
    private String userId;

    /**
     * ID of the integration which is being installed
     */
    @JsonProperty("integrationId")
    private String integrationId;

    /**
     * List of credentials to be used in this installation. If the user has authorized any of the apps in the integration more than once, then this field is required. Otherwise, the user's credentials will be automatically detected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentialIds")
    private Optional<? extends java.util.List<String>> credentialIds;

    /**
     * A list of workflows to include in this installation, if only a subset is desired. If every workflow in the integration will be installed, this field is optional.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workflowIds")
    private Optional<? extends java.util.List<String>> workflowIds;

    @JsonCreator
    public StartInstallationRequestBody(
            @JsonProperty("userId") String userId,
            @JsonProperty("integrationId") String integrationId,
            @JsonProperty("credentialIds") Optional<? extends java.util.List<String>> credentialIds,
            @JsonProperty("workflowIds") Optional<? extends java.util.List<String>> workflowIds) {
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(integrationId, "integrationId");
        Utils.checkNotNull(credentialIds, "credentialIds");
        Utils.checkNotNull(workflowIds, "workflowIds");
        this.userId = userId;
        this.integrationId = integrationId;
        this.credentialIds = credentialIds;
        this.workflowIds = workflowIds;
    }
    
    public StartInstallationRequestBody(
            String userId,
            String integrationId) {
        this(userId, integrationId, Optional.empty(), Optional.empty());
    }

    /**
     * ID of the user that will install your integration
     */
    @JsonIgnore
    public String userId() {
        return userId;
    }

    /**
     * ID of the integration which is being installed
     */
    @JsonIgnore
    public String integrationId() {
        return integrationId;
    }

    /**
     * List of credentials to be used in this installation. If the user has authorized any of the apps in the integration more than once, then this field is required. Otherwise, the user's credentials will be automatically detected.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> credentialIds() {
        return (Optional<java.util.List<String>>) credentialIds;
    }

    /**
     * A list of workflows to include in this installation, if only a subset is desired. If every workflow in the integration will be installed, this field is optional.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> workflowIds() {
        return (Optional<java.util.List<String>>) workflowIds;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * ID of the user that will install your integration
     */
    public StartInstallationRequestBody withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    /**
     * ID of the integration which is being installed
     */
    public StartInstallationRequestBody withIntegrationId(String integrationId) {
        Utils.checkNotNull(integrationId, "integrationId");
        this.integrationId = integrationId;
        return this;
    }

    /**
     * List of credentials to be used in this installation. If the user has authorized any of the apps in the integration more than once, then this field is required. Otherwise, the user's credentials will be automatically detected.
     */
    public StartInstallationRequestBody withCredentialIds(java.util.List<String> credentialIds) {
        Utils.checkNotNull(credentialIds, "credentialIds");
        this.credentialIds = Optional.ofNullable(credentialIds);
        return this;
    }

    /**
     * List of credentials to be used in this installation. If the user has authorized any of the apps in the integration more than once, then this field is required. Otherwise, the user's credentials will be automatically detected.
     */
    public StartInstallationRequestBody withCredentialIds(Optional<? extends java.util.List<String>> credentialIds) {
        Utils.checkNotNull(credentialIds, "credentialIds");
        this.credentialIds = credentialIds;
        return this;
    }

    /**
     * A list of workflows to include in this installation, if only a subset is desired. If every workflow in the integration will be installed, this field is optional.
     */
    public StartInstallationRequestBody withWorkflowIds(java.util.List<String> workflowIds) {
        Utils.checkNotNull(workflowIds, "workflowIds");
        this.workflowIds = Optional.ofNullable(workflowIds);
        return this;
    }

    /**
     * A list of workflows to include in this installation, if only a subset is desired. If every workflow in the integration will be installed, this field is optional.
     */
    public StartInstallationRequestBody withWorkflowIds(Optional<? extends java.util.List<String>> workflowIds) {
        Utils.checkNotNull(workflowIds, "workflowIds");
        this.workflowIds = workflowIds;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StartInstallationRequestBody other = (StartInstallationRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.userId, other.userId) &&
            java.util.Objects.deepEquals(this.integrationId, other.integrationId) &&
            java.util.Objects.deepEquals(this.credentialIds, other.credentialIds) &&
            java.util.Objects.deepEquals(this.workflowIds, other.workflowIds);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            userId,
            integrationId,
            credentialIds,
            workflowIds);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StartInstallationRequestBody.class,
                "userId", userId,
                "integrationId", integrationId,
                "credentialIds", credentialIds,
                "workflowIds", workflowIds);
    }
    
    public final static class Builder {
 
        private String userId;
 
        private String integrationId;
 
        private Optional<? extends java.util.List<String>> credentialIds = Optional.empty();
 
        private Optional<? extends java.util.List<String>> workflowIds = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the user that will install your integration
         */
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        /**
         * ID of the integration which is being installed
         */
        public Builder integrationId(String integrationId) {
            Utils.checkNotNull(integrationId, "integrationId");
            this.integrationId = integrationId;
            return this;
        }

        /**
         * List of credentials to be used in this installation. If the user has authorized any of the apps in the integration more than once, then this field is required. Otherwise, the user's credentials will be automatically detected.
         */
        public Builder credentialIds(java.util.List<String> credentialIds) {
            Utils.checkNotNull(credentialIds, "credentialIds");
            this.credentialIds = Optional.ofNullable(credentialIds);
            return this;
        }

        /**
         * List of credentials to be used in this installation. If the user has authorized any of the apps in the integration more than once, then this field is required. Otherwise, the user's credentials will be automatically detected.
         */
        public Builder credentialIds(Optional<? extends java.util.List<String>> credentialIds) {
            Utils.checkNotNull(credentialIds, "credentialIds");
            this.credentialIds = credentialIds;
            return this;
        }

        /**
         * A list of workflows to include in this installation, if only a subset is desired. If every workflow in the integration will be installed, this field is optional.
         */
        public Builder workflowIds(java.util.List<String> workflowIds) {
            Utils.checkNotNull(workflowIds, "workflowIds");
            this.workflowIds = Optional.ofNullable(workflowIds);
            return this;
        }

        /**
         * A list of workflows to include in this installation, if only a subset is desired. If every workflow in the integration will be installed, this field is optional.
         */
        public Builder workflowIds(Optional<? extends java.util.List<String>> workflowIds) {
            Utils.checkNotNull(workflowIds, "workflowIds");
            this.workflowIds = workflowIds;
            return this;
        }
        
        public StartInstallationRequestBody build() {
            return new StartInstallationRequestBody(
                userId,
                integrationId,
                credentialIds,
                workflowIds);
        }
    }
}

